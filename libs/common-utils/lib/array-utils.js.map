{"version":3,"file":"array-utils.js","sourceRoot":"","sources":["../src/array-utils.ts"],"names":[],"mappings":";;;AAAA,kCAA8C;AAE9C;;;;GAIG;AACI,MAAM,eAAe,GAAG,CAC7B,EAAU,EACV,EAAE,CAAC,IAAA,WAAM,EAAI,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC;AAF5B,QAAA,eAAe,mBAEa;AAElC,MAAM,wBAAwB,GAAG,CAItC,WAAc,EACd,EAAE,CACF,IAAA,QAAG,EAAO,CAAC,IAAI,EAAE,EAAE,CACjB,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,IAAI,CAAC,EAAE,KAAK,WAAW,CAAC,EAAE;IAC5C,CAAC,mBAAM,WAAW,EAClB,CAAC,mBAAM,IAAI,CAAE,CAChB,CAAC;AAVS,QAAA,wBAAwB,4BAUjC;AAEG,MAAM,QAAQ,GAAG,CAA2C,GAAS,EAAE,EAAE,CAC9E,IAAA,SAAI,EAAM,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC;AADtC,QAAA,QAAQ,YAC8B","sourcesContent":["import { filter, find, map } from 'lodash/fp';\n\n/**\n * Filters out items in an array\n * @param id - the id of the item you want to filter out\n * @returns A new array without the items having the `id`\n */\nexport const filterOutWithId = <T extends { id?: IdType }, IdType = string>(\n  id: IdType\n) => filter<T>((item) => item.id !== id);\n\nexport const updateItemWithMatchingId = <\n  T extends { id?: IdType },\n  IdType = string\n>(\n  updatedItem: T\n) =>\n  map<T, T>((item) =>\n    Boolean(item.id) && item.id === updatedItem.id\n      ? { ...updatedItem }\n      : { ...item }\n  );\n\nexport const findById = <Obj extends { id?: Type }, Type = string>($id: Type) =>\n  find<Obj>(({ id }) => Boolean(id) && id === $id);\n"]}