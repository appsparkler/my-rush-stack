{"version":3,"file":"MarkerCodeRenderer.js","sourceRoot":"","sources":["../../src/components/Configurator/MarkerCoderRenderer/MarkerCodeRenderer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAA8C;AAC9C,+CAA0D;AAC1D,0DAA+B;AAC/B,uBAAqB;AASd,MAAM,kBAAkB,GAAG,CAAC,EACjC,IAAI,GAAG,EAAE,EACT,OAAO,GAAG,EAAE,EACZ,YAAY,GAAG,EAAE,EACjB,QAAQ,GACgB,EAAE,EAAE;IAC5B,MAAM,OAAO,GAAG,IAAA,cAAM,EAAC,IAAI,CAAC,CAAC;IAC7B,MAAM,aAAa,GAAG,IAAA,eAAO,EAC3B,GAAG,EAAE,CAAC,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,EAC1D,EAAE,CACH,CAAC;IACF,MAAM,aAAa,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACjC,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QACnE,IAAI,WAAW,EAAE;YACf,OAAO;aACA,aAAa;GACvB,CAAC;SACC;QACD,OAAO;GACR,CAAC;IACF,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,MAAM,IAAI,GAAG,IAAA,eAAO,EAClB,GAAG,EAAE,CAAC;UACA,IAAI,IAAI,aAAa,EAAE,EAC7B,CAAC,IAAI,EAAE,aAAa,CAAC,CACtB,CAAC;IAEF,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,QAAQ,CAAC,IAAI,CAAC,CAAC;QACf,MAAM,eAAe,GAAG,kBAAK,CAAC,SAAS,CACrC,IAAI,EACH,kBAAK,CAAC,SAAiB,CAAC,GAAG,EAC5B,KAAK,CACN,CAAC;QACD,OAAO,CAAC,OAAe,CAAC,SAAS,GAAG,eAAe,CAAC;IACvD,CAAC,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;IAEpB,OAAO,CACL,8BAAC,cAAG,oBAAK,YAAY,IAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE;QACrD,uCAAK,SAAS,EAAC,cAAc;YAC3B,wCAAM,SAAS,EAAC,cAAc,EAAC,GAAG,EAAE,OAAO,GAAS,CAChD,CACF,CACP,CAAC;AACJ,CAAC,CAAC;AA5CW,QAAA,kBAAkB,sBA4C7B","sourcesContent":["import { Box, BoxProps } from '@mui/material';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport Prism from './prism.js';\nimport './prism.css';\n\nexport type MarkerCodeRendererProps = {\n  mark?: string;\n  options?: {};\n  wrapperProps?: BoxProps;\n  onChange: (updatedCode: string) => void;\n};\n\nexport const MarkerCodeRenderer = ({\n  mark = '',\n  options = {},\n  wrapperProps = {},\n  onChange,\n}: MarkerCodeRendererProps) => {\n  const codeRef = useRef(null);\n  const optionsString = useMemo(\n    () => JSON.stringify(options, null, 4).replace('}', `  }`),\n    []\n  );\n  const optionsRender = useMemo(() => {\n    const showOptions = Object.keys(options).length > 0 ? true : false;\n    if (showOptions) {\n      return `\n  options={${optionsString}}\n/>`;\n    }\n    return `\n/>`;\n  }, []);\n  const code = useMemo(\n    () => `<Marker\n  mark=\"${mark}\"${optionsRender}`,\n    [mark, optionsRender]\n  );\n\n  useEffect(() => {\n    onChange(code);\n    const highlightedCode = Prism.highlight(\n      code,\n      (Prism.languages as any).jsx,\n      'jsx'\n    );\n    (codeRef.current as any).innerHTML = highlightedCode;\n  }, [mark, options]);\n\n  return (\n    <Box {...wrapperProps} sx={{ pre: { borderRadius: 4 } }}>\n      <pre className=\"language-jsx\">\n        <code className=\"language-jsx\" ref={codeRef}></code>\n      </pre>\n    </Box>\n  );\n};\n"]}