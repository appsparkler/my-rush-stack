{"version":3,"file":"MarkerCodeRenderer.js","sourceRoot":"","sources":["../../../../src/components/Configurator/MarkerCoderRenderer/MarkerCodeRenderer.tsx"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,4CAA8C;AAC9C,+CAA0D;AAC1D,+CAAiC;AACjC,2CAAyC;AACzC,6CAA2C;AAC3C,kCAAuC;AAgBhC,MAAM,kBAAkB,GAAG,CAAC,EACjC,IAAI,GAAG,EAAE,EACT,UAAU,GAAG,QAAQ,EACrB,cAAc,GAAG,KAAK,EACtB,OAAO,GAAG,EAAE,EACZ,MAAM,GAAG,EAAE,EACX,YAAY,GAAG,EAAE,EACjB,QAAQ,GAAG,SAAI,EACf,WAAW,GAAG,KAAK,GACK,EAAE,EAAE;IAC5B,MAAM,OAAO,GAAG,IAAA,cAAM,EAAC,IAAI,CAAC,CAAC;IAC7B,MAAM,aAAa,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACjC,OAAO,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC9D,CAAC,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;IACd,MAAM,YAAY,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QAChC,IAAI,cAAc,EAAE;YAClB,MAAM,QAAQ,GAAG,IAAI,CAAC;YACtB,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,OAAO,CACxD,GAAG,EACH,GAAG,QAAQ,GAAG,CACf,CAAC;YACF,OAAO,SAAS,UAAU,GAAG,CAAC;SAC/B;QACD,IAAI,WAAW,EAAE;YACf,OAAO,SAAS,IAAI,GAAG,CAAC;SACzB;QACD,OAAO,SAAS,IAAI,GAAG,CAAC;IAC1B,CAAC,EAAE,CAAC,WAAW,EAAE,cAAc,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IAChD,MAAM,aAAa,GAAG,IAAA,eAAO,EAAC,GAAG,EAAE;QACjC,MAAM,WAAW,GAAG,IAAA,SAAI,EAAC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC;QAC5D,IAAI,WAAW,EAAE;YACf,OAAO;aACA,aAAa;GACvB,CAAC;SACC;QACD,OAAO;GACR,CAAC;IACF,CAAC,EAAE,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC,CAAC;IAC7B,MAAM,IAAI,GAAG,IAAA,eAAO,EAClB,GAAG,EAAE,CAAC,IAAI,UAAU;IACpB,YAAY,GAAG,aAAa,EAAE,EAC9B,CAAC,YAAY,EAAE,UAAU,EAAE,aAAa,CAAC,CAC1C,CAAC;IAEF,IAAA,iBAAS,EAAC,GAAG,EAAE;QACb,QAAQ,CAAC,IAAI,CAAC,CAAC;QAEf,MAAM,eAAe,GAAG,KAAK,CAAC,SAAS,CACrC,IAAI,EACH,KAAK,CAAC,SAAiB,CAAC,GAAG,EAC5B,KAAK,CACN,CAAC;QACD,OAAO,CAAC,OAAe,CAAC,SAAS,GAAG,eAAe,CAAC;IACvD,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;IAEpC,OAAO,CACL,8BAAC,cAAG,oBAAK,YAAY,IAAE,EAAE,EAAE,EAAE,GAAG,EAAE,EAAE,YAAY,EAAE,CAAC,EAAE,EAAE;QACrD,uCAAK,SAAS,EAAC,cAAc;YAC3B,wCAAM,SAAS,EAAC,cAAc,EAAC,GAAG,EAAE,OAAO,GAAS,CAChD,CACF,CACP,CAAC;AACJ,CAAC,CAAC;AA9DW,QAAA,kBAAkB,sBA8D7B","sourcesContent":["import { Box, BoxProps } from '@mui/material';\nimport React, { useEffect, useMemo, useRef } from 'react';\nimport * as Prism from 'prismjs';\nimport 'prismjs/components/prism-jsx.js';\nimport 'prismjs/themes/prism-tomorrow.css';\nimport { keys, noop } from 'lodash/fp';\nimport { RangeMarkerItem } from 'mark.js';\n\nexport type MarkerType = 'RangesMarker' | 'Marker' | 'RegExpMarker';\n\nexport type MarkerCodeRendererProps = {\n  markerType?: MarkerType;\n  mark?: string | RegExp | RangeMarkerItem[];\n  options?: {};\n  ranges?: { start: number; length: number }[];\n  isRangesMarker?: boolean;\n  wrapperProps?: BoxProps;\n  onChange?: (updatedCode: string) => void;\n  isMarkArray?: boolean;\n};\n\nexport const MarkerCodeRenderer = ({\n  mark = '',\n  markerType = 'Marker',\n  isRangesMarker = false,\n  options = {},\n  ranges = [],\n  wrapperProps = {},\n  onChange = noop,\n  isMarkArray = false,\n}: MarkerCodeRendererProps) => {\n  const codeRef = useRef(null);\n  const optionsString = useMemo(() => {\n    return JSON.stringify(options, null, 4).replace('}', `  }`);\n  }, [options]);\n  const markRenderer = useMemo(() => {\n    if (isRangesMarker) {\n      const SPACES_2 = `  `;\n      const rangesJSON = JSON.stringify(ranges, null, 4).replace(\n        ']',\n        `${SPACES_2}]`\n      );\n      return `mark={${rangesJSON}}`;\n    }\n    if (isMarkArray) {\n      return `mark={${mark}}`;\n    }\n    return `mark=\"${mark}\"`;\n  }, [isMarkArray, isRangesMarker, mark, ranges]);\n  const optionsRender = useMemo(() => {\n    const showOptions = keys(options).length > 0 ? true : false;\n    if (showOptions) {\n      return `\n  options={${optionsString}}\n/>`;\n    }\n    return `\n/>`;\n  }, [options, optionsString]);\n  const code = useMemo(\n    () => `<${markerType}\n  ${markRenderer}${optionsRender}`,\n    [markRenderer, markerType, optionsRender]\n  );\n\n  useEffect(() => {\n    onChange(code);\n\n    const highlightedCode = Prism.highlight(\n      code,\n      (Prism.languages as any).jsx,\n      'jsx'\n    );\n    (codeRef.current as any).innerHTML = highlightedCode;\n  }, [code, mark, onChange, options]);\n\n  return (\n    <Box {...wrapperProps} sx={{ pre: { borderRadius: 4 } }}>\n      <pre className=\"language-jsx\">\n        <code className=\"language-jsx\" ref={codeRef}></code>\n      </pre>\n    </Box>\n  );\n};\n"]}